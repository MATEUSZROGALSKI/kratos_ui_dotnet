@using Ory.Kratos.Client.Model

@model KratosUiContainer

@{
    var groups = Model.Nodes.GroupBy(n => n.Group).ToDictionary(g => g.Key, g => g.ToList());
}

@if (Model.Messages is not null && Model.Messages.Any())
{
    <partial name="Controls/_FormMessage" for="@Model.Messages" />
}

<div class="w-full">
    <form action="@Model.Action" method="@Model.Method">
        @foreach(var node in groups[KratosUiNode.GroupEnum.Default])
        {
            <partial name="Controls/_HiddenField" for="@node" />
        }
        <div class="space-y-2 w-full flex flex-col justify-between items-center">
            @foreach (var group in groups.Where(g => g.Key != KratosUiNode.GroupEnum.Default))
            {
                <div class="space-y-4 w-full flex flex-col">
                    <h1>@group.Key</h1>
                @foreach (var node in group.Value)
                {
                    switch (node.Type)
                    {
                        case KratosUiNode.TypeEnum.Input:
                            var attributes = node.Attributes.GetKratosUiNodeInputAttributes();
                            switch (attributes.Type)
                            {
                                case KratosUiNodeInputAttributes.TypeEnum.Password:
                                case KratosUiNodeInputAttributes.TypeEnum.Text:
                                case KratosUiNodeInputAttributes.TypeEnum.Email:
                                case KratosUiNodeInputAttributes.TypeEnum.Url:
                                case KratosUiNodeInputAttributes.TypeEnum.Number:
                                    <partial name="Controls/_InputField" for="@node" />
                                    break;

                                case KratosUiNodeInputAttributes.TypeEnum.Submit:
                                case KratosUiNodeInputAttributes.TypeEnum.Button:
                                    <partial name="Controls/_Button" for="@node" />
                                    break;

                                case KratosUiNodeInputAttributes.TypeEnum.Hidden:
                                    <partial name="Controls/_HiddenField" for="@node" />
                                    break;

                                case KratosUiNodeInputAttributes.TypeEnum.Checkbox:
                                    <partial name="Controls/_CheckboxField" for="@node" />
                                    break;
                            }
                            break;

                        case KratosUiNode.TypeEnum.Img:
                            <partial name="Controls/_Image" for="@node" />
                            break;

                        case KratosUiNode.TypeEnum.Text:
                            <partial name="Controls/_Text" for="@node" />
                            break;

                        case KratosUiNode.TypeEnum.Script:
                            var scriptAttributes = node.Attributes.GetKratosUiNodeScriptAttributes();
                            @section Scripts
                            {
                                <script src="@scriptAttributes.Src"
                                        type="@scriptAttributes.Type"
                                        integrity="@scriptAttributes.Integrity"
                                        referrerpolicy="@scriptAttributes.Referrerpolicy"
                                        crossorigin="@scriptAttributes.Crossorigin"
                                        async="@scriptAttributes.Async"></script>
                            }
                            break;
                    }
                }
                </div>
            }
        </div>
    </form>
</div>