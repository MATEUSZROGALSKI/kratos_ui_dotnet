@using Ory.Kratos.Client.Model

@model KratosUiContainer

@if (Model.Messages is not null && Model.Messages.Any())
{
    <div class="space-y-2 my-2 w-full">
        <partial name="Controls/_FormMessage" for="@Model.Messages" />
    </div>
}

<div class="w-full">
    <form action="@Model.Action" method="@Model.Method">
        <div class="space-y-4 w-full">
            @foreach (var node in Model.Nodes.Where(n => n.Group != KratosUiNode.GroupEnum.Oidc))
            {
                switch (node.Type)
                {
                    case KratosUiNode.TypeEnum.Input:
                        var attributes = node.Attributes.GetKratosUiNodeInputAttributes();
                        switch (attributes.Type)
                        {
                            case KratosUiNodeInputAttributes.TypeEnum.Password:
                            case KratosUiNodeInputAttributes.TypeEnum.Text:
                            case KratosUiNodeInputAttributes.TypeEnum.Email:
                            case KratosUiNodeInputAttributes.TypeEnum.Url:
                            case KratosUiNodeInputAttributes.TypeEnum.Number:
                                <partial name="Controls/_InputField" for="@node" />
                                break;

                            case KratosUiNodeInputAttributes.TypeEnum.Submit:
                            case KratosUiNodeInputAttributes.TypeEnum.Button:
                                <partial name="Controls/_Button" for="@node" />
                                break;

                            case KratosUiNodeInputAttributes.TypeEnum.Hidden:
                                <partial name="Controls/_HiddenField" for="@node" />
                                break;

                            case KratosUiNodeInputAttributes.TypeEnum.Checkbox:
                                <partial name="Controls/_CheckboxField" for="@node" />
                                break;
                        }
                        break;

                    case KratosUiNode.TypeEnum.Img:
                        <partial name="Controls/_Image" for="@node" />
                        break;

                    case KratosUiNode.TypeEnum.Text:
                        <partial name="Controls/_Text" for="@node" />
                        break;

                    case KratosUiNode.TypeEnum.Script:
                        var scriptAttributes = node.Attributes.GetKratosUiNodeScriptAttributes();
                        @section Scripts
                {
                <script src="@scriptAttributes.Src"
                        type="@scriptAttributes.Type"
                        integrity="@scriptAttributes.Integrity"
                        referrerpolicy="@scriptAttributes.Referrerpolicy"
                        crossorigin="@scriptAttributes.Crossorigin"
                        async="@scriptAttributes.Async"></script>
            }
                        break;
                }
            }
        </div>

        <div class="space-y-2 w-full mb-2">

            <div class="flex items-center justify-center space-x-2 my-5">
                <span class="h-px w-16 bg-gray-100"></span>
                <span class="text-gray-300 font-normal">or</span>
                <span class="h-px w-16 bg-gray-100"></span>
            </div>

            <div class="flex justify-center gap-5 w-full ">

                @foreach (var node in Model.Nodes.Where(n => n.Group == KratosUiNode.GroupEnum.Oidc))
                {
                    switch (node.Type)
                    {
                        case KratosUiNode.TypeEnum.Input:
                            var attributes = node.Attributes.GetKratosUiNodeInputAttributes();
                            switch (attributes.Type)
                            {
                                case KratosUiNodeInputAttributes.TypeEnum.Submit:
                                case KratosUiNodeInputAttributes.TypeEnum.Button:
                                    <button class="w-full flex items-center justify-center mb-6 md:mb-0 border border-gray-300 hover:border-gray-900 hover:bg-gray-900 text-sm text-gray-500 p-3  rounded-lg tracking-wide font-medium  cursor-pointer transition ease-in duration-500"
                                        type="@attributes.Type"
                                        name="@attributes.Name"
                                        id="@attributes.Name"
                                        disabled="@attributes.Disabled"
                                        required="@attributes.Required"
                                        value="@attributes.Value">
                                        <svg class="w-4 mr-2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="#EA4335" d="M5.266 9.765A7.077 7.077 0 0 1 12 4.909c1.69 0 3.218.6 4.418 1.582L19.91 3C17.782 1.145 15.055 0 12 0 7.27 0 3.198 2.698 1.24 6.65l4.026 3.115Z" /><path fill="#34A853" d="M16.04 18.013c-1.09.703-2.474 1.078-4.04 1.078a7.077 7.077 0 0 1-6.723-4.823l-4.04 3.067A11.965 11.965 0 0 0 12 24c2.933 0 5.735-1.043 7.834-3l-3.793-2.987Z" /><path fill="#4A90E2" d="M19.834 21c2.195-2.048 3.62-5.096 3.62-9 0-.71-.109-1.473-.272-2.182H12v4.637h6.436c-.317 1.559-1.17 2.766-2.395 3.558L19.834 21Z" /><path fill="#FBBC05" d="M5.277 14.268A7.12 7.12 0 0 1 4.909 12c0-.782.125-1.533.357-2.235L1.24 6.65A11.934 11.934 0 0 0 0 12c0 1.92.445 3.73 1.237 5.335l4.04-3.067Z" /></svg>
                                        <span>@node.Meta.Label.Text</span>
                                    </button>
                                    break;
                            }
                            break;
                    }
                }

            </div>
        </div>
    </form>
</div>